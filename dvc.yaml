stages:
  data_ingestion:
    cmd: python src/cnnProject/pipeline/stage_01_data_ingestion.py
    deps: 
      - src/cnnProject/pipeline/stage_01_data_ingestion.py
      - config/config.yaml
    outs:
      - artifacts/data_ingestion/Chicken-fecal-images

  prepare_base_model:
    cmd: python src/cnnProject/pipeline/stage_02_prepare_base_model.py
    deps: 
      - src/cnnProject/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    outs:
      - artifacts/prepare_base_model

  training:
    cmd: python src/cnnProject/pipeline/stage_03_model_trainer.py
    deps:
      - src/cnnProject/pipeline/stage_03_model_trainer.py
      - src/cnnProject/components/prepare_base_model.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/prepare_base_model
    params: 
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5
  
  evaluation:
    cmd: python src/cnnProject/pipeline/stage_04_evaluation.py
    deps:
      - src/cnnProject/pipeline/stage_04_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/training/model.h5
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    metrics: 
      - scores.json:
          cache: false

#Each block under stages: describes one stage of your ML pipeline.
#For each stage, DVC tracks:
#-> cmd → what command to run (a script)
#-> deps → dependencies (files needed)
#-> outs → outputs (what the stage generates)
#-> params → parameters pulled from params.yaml
#-> metrics → output metric files (used for evaluation, comparison)